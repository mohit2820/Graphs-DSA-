// Question Link  :  https://www.geeksforgeeks.org/problems/prerequisite-tasks/1?page=2&difficulty%5B%5D=1&category%5B%5D=Graph&sortBy=submissions

class Solution {
    public boolean isPossible(int N, int P, int[][] prerequisites) {
       
       ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
       
       for(int i=0; i<N; i++) adj.add(new ArrayList<>());

       // convert matrix to adjacency list 
       for(int i=0; i<P; i++){      // loop ko <P tak kyo chala rhe hai kyo ki we only hai P Prerequisite  (P length hai matrix ki)
           int a = prerequisites[i][0];
           int b = prerequisites[i][1];
           
           adj.get(b).add(a);    // agar list hai a-> b (hamko nodes b-> a) mai dalne hai 
       }
       
       
      //    core Logic : 
     //[   [1,0],
    //     [2,1],
    //     [3,2]  ]
    
    // given -> task 1 complete hone ke liye task 0 complete hona chiye 

      // DAG -> Topological Sort 
      // 0 -> 1    we can write 0 phle ayega 1 se tab hi task 1 complete hoga 
      // 1 -> 2
      // 2 -> 3 
      
      // DAG ka concept lagega 
      // DAG tab hi possible hai jab graph mai cycle na ho 
      // so cycle detection is core logic (we will use khan's algo)
      
      
      int[] inDegree = new int[N];
      
      // N to total nodes ya task hai , sare nodes ki indegree nikalo 
      for(int i=0; i<N; i++){
          for(int j=0; j<adj.get(i).size(); j++){
              inDegree[adj.get(i).get(j)]++;
          }
      }
      
      
      Queue<Integer> q = new LinkedList<>();
      // jis node ki indegree 0 hai wo dalo queue mai
      for(int i=0; i<N; i++){
          if(inDegree[i]==0) q.add(i);
      }
      
      int count = 0;
      
      while(!q.isEmpty()){
          
          int top = q.poll();
          count++;   // 1 node nikalo or count bada to (1 order element mil chuka hai topological sort ka)
          
          for(int i=0; i<adj.get(top).size(); i++){
              
              int current = adj.get(top).get(i);
              
              inDegree[current]--;
              if(inDegree[current]==0) q.add(current);
          }
      }
       
       
       
       
    return (count==N) ? true : false;   // final logic 
           
    }
}
