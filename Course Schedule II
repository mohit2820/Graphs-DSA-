// Link : https://www.geeksforgeeks.org/problems/course-schedule/1?page=2&difficulty%5B%5D=1&category%5B%5D=Graph&sortBy=submissions

class Solution {
    public ArrayList<Integer> findOrder(int n, int[][] prerequisites) {
        
        int p = prerequisites.length;  // prerequesites 
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        int[] inDegree = new int[n];
        Queue<Integer> q = new LinkedList<>();
        ArrayList<Integer> ans = new ArrayList<>();
        

        for(int i=0; i<n; i++) adj.add(new ArrayList<>());
        
        for(int i=0; i<p; i++){
            
            int a = prerequisites[i][0];
            int b = prerequisites[i][1];
            
            adj.get(b).add(a);
            inDegree[a]++;
            
        }
        
        
        for(int i=0; i<n; i++) if(inDegree[i]==0) q.add(i);
        
        while(!q.isEmpty()){
            
            int top = q.poll();
            ans.add(top);
            
            for(int i=0; i<adj.get(top).size(); i++){
                
                int current = adj.get(top).get(i);
                
                inDegree[current]--;
                if(inDegree[current]==0) q.add(current);
            }
            
        }
        
    return(ans.size()==n) ? ans : new ArrayList<>();

    }
}
